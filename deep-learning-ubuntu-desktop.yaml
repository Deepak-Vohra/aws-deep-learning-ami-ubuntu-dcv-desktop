AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS Deep Learning Ubuntu Desktop with DCV Server. 
  Connect using a DCV Client.
Parameters:
  S3Bucket:
    Description: S3 bucket name for read write access from desktop
    Type: String
  DeepLearningAMIUbuntu:
    Description: >-
      (Optional) Advanced option to override 
      Deep Learning AMI for Ubuntu 18.04, 
      or 20.04, available in your region.  Leave blank, if unsure.
    Type: String
    AllowedPattern: '(ami-[0-9a-z]{17})?'
  DesktopVpcId:
    Description: Desktop VPC ID
    Type: 'AWS::EC2::VPC::Id'
  DesktopVpcSubnetId:
    Description: Desktop VPC Subnet ID. Subnet must be public for access over Internet.
    Type: 'AWS::EC2::Subnet::Id'
  DesktopHasPublicIpAddress:
    Description: Should a Public Ip Address be associated with the Desktop?
    Type: String
    Default: "true"
    AllowedValues:
     - "true"
     - "false"
  EbsVolumeSize:
    Default: 200
    Description: Ebs volume size (GB)
    Type: Number
    MinValue: 200
  EbsVolumeType:
    Default: 'gp3'
    Description: Ebs volume type
    Type: String
    AllowedValues:
      - 'gp2'
      - 'gp3'
  
  EFSFileSystemId:
    Description: >-
      (Optional) Advanced option to specify an
      existing EFS File System Id with an existing mount target in your subnet.
      Leave blank to create a new EFS file system.
    Type: String
    AllowedPattern: '(^fs-[0-9a-f]{8,8})$|()$'
    Default: ''
    ConstraintDescription: Should be a Valid EFS File System Id, or blank
  
  EFSMountPath:
    Description: EFS file-system mount directory path.
    Type: String
    Default: '/efs'
    ConstraintDescription: Should be a valid file-system directory path
  
  DesktopSecurityGroupId:
    Description: >-
     (Optional) Advanced option to specify existing Desktop Security Group Id. 
      Leave blank to create new Security Group.
    Type: String
    AllowedPattern: '(^sg-[0-9a-z]{17,17})$|()$'
    Default: ''
    ConstraintDescription: Should be a Valid SecurityGroup Id in selected VPC, or blank

  KeyName:
    Description: >-
      Name of an existing Amazon EC2 KeyPair to enable SSH and DCV access to the
      desktop
    Type: 'AWS::EC2::KeyPair::KeyName'
  DesktopInstanceType:
    Description: EC2 instance type for desktop
    Type: String
    Default: g3s.xlarge
    AllowedValues:
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.12xlarge
      - c5d.18xlarge
      - c5d.24xlarge
      - g3s.xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g4dn.8xlarge
      - g4dn.12xlarge
      - g4dn.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - p3dn.24xlarge
      - p4d.24xlarge
    ConstraintDescription: Must be a valid CPU, or GPU instance type.
  DesktopAccessCIDR:
    Description: >-
      Restrict desktop access for SSH and DCV client from a valid CIDR range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
  EBSOptimized:
    Description: >-
      Is the instance EBS optimized?
    Type: String
    Default: 'true'
    AllowedValues:
      - 'false'
      - 'true'

Mappings:
  DeepLearningAMIUbuntu:
    us-east-1:
      AMI: ami-05f6982c11ca3027d
    us-east-2:
      AMI: ami-07f83f2fb8212ce3b 
    us-west-2:
      AMI: ami-0ad8583a83f802ca4 
    eu-west-1:
      AMI: ami-049ef6e979361936b 
    eu-central-1:
      AMI: ami-07fbd58b78f5e5248 
    ap-southeast-1:
      AMI: ami-08879cdd5a9950697 
    ap-southeast-2:
      AMI: ami-0c2ce6c550986b24d 
    ap-south-1:
      AMI: ami-075aed164f155cade 
    ap-northeast-1:
      AMI: ami-0e0dce3efe7e0bcc3 
    ap-northeast-2:
      AMI: ami-079172bcb6fe144f8

Conditions:
  OverrideAMI: !Not 
    - !Equals 
      - !Ref DeepLearningAMIUbuntu
      - ''
  CreateNewEFSFileSystem: !Equals 
    - !Ref EFSFileSystemId
    - ''
  CreateNewSecurityGroup: !Equals 
    - !Ref DesktopSecurityGroupId
    - ''

Resources:
  
  DesktopSecurityGroup:
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Desktop security group
      VpcId: !Ref DesktopVpcId
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  DesktopSecurityGroupCIDRIngressSSH: 
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from CIDR for NICE-DCV access to graphics desktop
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      CidrIp: !Ref DesktopAccessCIDR
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443

  DesktopSecurityGroupCIDRIngressDCV: 
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from CIDR for SSH access to graphics desktop
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      CidrIp: !Ref DesktopAccessCIDR
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  
  DesktopSecurityGroupCIDRIngressSelf: 
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from self security group
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt DesktopSecurityGroup.GroupId
  
  DesktopSecurityGroupCIDREgress: 
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Condition: CreateNewEFSFileSystem
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Encrypted : true
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  
  EFSMountTarget:
    Condition: CreateNewEFSFileSystem
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref DesktopVpcSubnetId
      SecurityGroups: 
        - !If
          - CreateNewSecurityGroup
          - !GetAtt DesktopSecurityGroup.GroupId
          - !Ref DesktopSecurityGroupId

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerFullAccess'
      Policies:
        - PolicyName: s3-read-write
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject*"
                  - "s3:DeleteObject*"
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
        - PolicyName: dcv-license-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::dcv-license.${AWS::Region}/*'
        
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  
  DesktopInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !If 
        - OverrideAMI
        - !Ref DeepLearningAMIUbuntu
        - !FindInMap 
          - DeepLearningAMIUbuntu
          - !Ref 'AWS::Region'
          - AMI
      InstanceType: !Ref DesktopInstanceType
      EbsOptimized: !Ref EBSOptimized
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref EbsVolumeSize
            VolumeType: !Ref EbsVolumeType
            Encrypted: true
            DeleteOnTermination: true
      NetworkInterfaces: 
      - AssociatePublicIpAddress: !Ref DesktopHasPublicIpAddress
        DeviceIndex: "0"
        GroupSet: 
          - !If
            - CreateNewSecurityGroup
            - !GetAtt DesktopSecurityGroup.GroupId
            - !Ref DesktopSecurityGroupId

        SubnetId: !Ref DesktopVpcSubnetId

      KeyName: !Ref KeyName
      Tags: 
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-deep-learning-ubuntu-desktop'

      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              Content-Type: multipart/mixed; boundary="//"
              MIME-Version: 1.0

              --//
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"

              #cloud-config
              cloud_final_modules:
              - [scripts-user, always]

              --//
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="userdata.txt"

              #!/bin/bash -xe

              if [[ -f "/etc/systemd/system/dcvsession.service" ]]
              then
                apt install -y lustre-client-modules-$(uname -r)
                /usr/local/bin/mount-efs.sh
                exit 0
              fi

              echo "Cloud init in progress. Machine will REBOOT after cloud init is complete!!" > /etc/motd
              
              # Find Ubuntu Version 
              VERSION=$(lsb_release -a | grep Release | awk -F ":" '{print $2}' | sed -E -e 's/[[:blank:]]+//g')
              echo "Detected Ubuntu $VERSION"
              
              # setup graphics desktop
              export DEBIAN_FRONTEND=noninteractive
              export DEBCONF_NONINTERACTIVE_SEEN=true

              # setup software repo for docker
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              apt-key fingerprint 0EBFCD88
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
   
              # setup software repo for fsx-lustre client
              wget -O - https://fsx-lustre-client-repo-public-keys.s3.amazonaws.com/fsx-ubuntu-public-key.asc | apt-key add -
              bash -c 'echo "deb https://fsx-lustre-client-repo.s3.amazonaws.com/ubuntu bionic main" > /etc/apt/sources.list.d/fsxlustreclientrepo.list'

              # add key for NICE-DCV
              wget https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
              gpg --import NICE-GPG-KEY

              # update and install required packages
              apt update

              # check if we need NVIDIA drivers and if they are installed
              apt -y install ubuntu-drivers-common
              NVIDIA_DRIVER=$(ubuntu-drivers devices | grep nvidia-driver | grep recommended | awk -F " " '{print $3}')
              if [[ $NVIDIA_DRIVER != "" && ! -x "$(command -v nvidia-smi)" ]]
              then
                echo "Auto install NVIDIA GPU drivers"
                ubuntu-drivers autoinstall
                reboot
              fi

              apt install -y git tar
              apt install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
              
              # install docker if it is not installed
              if [ ! -x "$(command -v docker)" ]; then
                apt install -y docker-ce docker-ce-cli containerd.io      
                usermod -aG docker ubuntu
              fi

              apt install -y tzdata
              apt install -y keyboard-configuration
              apt install -y gnupg2
              apt install -y lsb-core 

              # install DCV server
              echo "install DCV server..."
              apt install -y ubuntu-desktop

              if [[ $VERSION == "18.04" ]]
              then
                apt install -y lightdm
                apt -y upgrade
                echo "/usr/sbin/lightdm" > /etc/X11/default-display-manager
                dpkg-reconfigure lightdm

                apt install -y mesa-utils
                if [ -x "$(command -v nvidia-xconfig)" ]; then
                  nvidia-xconfig --preserve-busid --enable-all-gpus
                fi

                #restart X server
                echo "restart X-server"
                systemctl set-default graphical.target
                systemctl isolate graphical.target

                wget https://d1uj6qtbmh3dt5.cloudfront.net/2020.2/Servers/nice-dcv-2020.2-9662-ubuntu1804-x86_64.tgz
                tar -xvzf nice-dcv-2020.2-9662-ubuntu1804-x86_64.tgz 
                cd nice-dcv-2020.2-9662-ubuntu1804-x86_64
                apt install -y  ./nice-dcv-server_2020.2.9662-1_amd64.ubuntu1804.deb
              elif [[ $VERSION == "20.04" ]]
              then
                apt install -y gdm3
                apt -y upgrade
                echo "/usr/sbin/gdm3" > /etc/X11/default-display-manager
                dpkg-reconfigure gdm3
                sed -i -e "s/#WaylandEnable=false/WaylandEnable=false/g" /etc/gdm3/custom.conf
                systemctl restart gdm3

                apt install -y mesa-utils
                if [ -x "$(command -v nvidia-xconfig)" ]; then
                  nvidia-xconfig --preserve-busid --enable-all-gpus
                fi

                #restart X server
                echo "restart X-server"
                systemctl set-default graphical.target
                systemctl isolate graphical.target

                wget https://d1uj6qtbmh3dt5.cloudfront.net/2020.2/Servers/nice-dcv-2020.2-9662-ubuntu2004-x86_64.tgz
                tar -xvzf nice-dcv-2020.2-9662-ubuntu2004-x86_64.tgz
                cd nice-dcv-2020.2-9662-ubuntu2004-x86_64
                apt install -y ./nice-dcv-server_2020.2.9662-1_amd64.ubuntu2004.deb/
              else
                echo "Ubuntu $VERSION is not supported; must be one of 18.04, or 20.04"
                exit 1
              fi

              #restart X server
              systemctl set-default graphical.target
              systemctl isolate graphical.target

              # Create DCV server configuration file
              mkdir  /opt/dcv-session-store
              echo "[license]" >> dcv.conf
              echo "[log]" >> dcv.conf
              echo "[session-management]" >> dcv.conf
              echo "[session-management/defaults]" >> dcv.conf
              echo "[session-management/automatic-console-session]" >> dcv.conf
              echo "storage-root=\"/opt/dcv-session-store/\"" >> dcv.conf
              echo "[display]" >> dcv.conf
              echo "[connectivity]" >> dcv.conf
              echo "[security]" >> dcv.conf
              echo "authentication=\"system\"" >> dcv.conf
              echo "[clipboard]" >> dcv.conf
              echo "primary-selection-copy=true" >> dcv.conf
              echo "primary-selection-paste=true" >> dcv.conf
              mv dcv.conf /etc/dcv/dcv.conf

              # Enable DCV server
              systemctl enable dcvserver

              # Create DCV session permissions files
              rm -f /home/ubuntu/dcv.perms
              echo "[permissions]" >> /home/ubuntu/dcv.perms
              echo "%owner% allow builtin" >> /home/ubuntu/dcv.perms

              # Create startup session script
              echo "#!/bin/bash" >> /usr/local/bin/start-dcvsession.sh
              echo "dcv create-session --type=console --owner ubuntu --storage-root /opt/dcv-session-store/ --permissions-file /home/ubuntu/dcv.perms dcvsession" >> /usr/local/bin/start-dcvsession.sh
              chmod a+x /usr/local/bin/start-dcvsession.sh

              echo "[Unit]" >> /etc/systemd/system/dcvsession.service
              echo "Description=DCV session service" >> /etc/systemd/system/dcvsession.service
              echo "After=dcvserver.service" >> /etc/systemd/system/dcvsession.service
              echo "" >> /etc/systemd/system/dcvsession.service
              echo "[Service]" >> /etc/systemd/system/dcvsession.service
              echo "User=root" >> /etc/systemd/system/dcvsession.service
              echo "ExecStart=/usr/local/bin/start-dcvsession.sh" >> /etc/systemd/system/dcvsession.service
              echo "Restart= on-abort" >> /etc/systemd/system/dcvsession.service
              echo "" >> /etc/systemd/system/dcvsession.service
              echo "[Install]" >> /etc/systemd/system/dcvsession.service
              echo "WantedBy=graphical.target" >> /etc/systemd/system/dcvsession.service

              systemctl enable dcvsession
              echo "install DCV server complete"

              # install nfs-common
              apt install -y nfs-common
            
            - AWS_REGION=
            - !Ref AWS::Region
            - |+

            - EFS_FS_ID=
            - !If 
              - CreateNewEFSFileSystem
              - !Ref EFSFileSystem
              - !Ref EFSFileSystemId
            - |+

            - EFS_MOUNT_PATH=
            - !Ref EFSMountPath
            - |+

            - DESKTOP_ROLE_ARN=
            - !GetAtt InstanceRole.Arn
            - |+

            - DESKTOP_SUBNET_ID=
            - !Ref DesktopVpcSubnetId
            - |+

            - DESKTOP_SG_ID=
            - !If
              - CreateNewSecurityGroup
              - !GetAtt DesktopSecurityGroup.GroupId
              - !Ref DesktopSecurityGroupId
            - |+

            - |
              # Create EFS  mount script
              cat >/usr/local/bin/mount-efs.sh <<EOL
              #!/bin/bash

              if [[ ! -d $EFS_MOUNT_PATH ]]
              then
                mkdir $EFS_MOUNT_PATH
              fi
              
              # Mount EFS
              mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport $EFS_FS_ID.efs.$AWS_REGION.amazonaws.com:/ $EFS_MOUNT_PATH

              EOL
              chmod u+x /usr/local/bin/mount-efs.sh

              # Create config file
              mkdir /home/ubuntu/.aws
              cat >/home/ubuntu/.aws/config <<EOL
              [default]
              region = ${AWS_REGION}

              EOL
              chown -R ubuntu:ubuntu /home/ubuntu/.aws

              # update .bashrc
              echo "export desktop_role_arn=${DESKTOP_ROLE_ARN}" >> /home/ubuntu/.bashrc
              echo "export desktop_sg_id=${DESKTOP_SG_ID}" >> /home/ubuntu/.bashrc
              echo "export desktop_subnet_id=${DESKTOP_SUBNET_ID}" >> /home/ubuntu/.bashrc

              echo "NICE DCV server is enabled!" > /etc/motd
              reboot
Outputs:
  DesktopInstanceId:
    Description: Desktop instance Id
    Value: !Ref DesktopInstance
  DesktopRole:
    Description: IAM role attached to desktop instance profile
    Value: !GetAtt InstanceRole.Arn
  DesktopSecurityGroup:
    Description: Desktop security group
    Value: !If
      - CreateNewSecurityGroup
      - !GetAtt DesktopSecurityGroup.GroupId
      - !Ref DesktopSecurityGroupId
  EFSFileSystemId:
    Description: EFS file system attached to the desktop
    Value: !If
      - CreateNewEFSFileSystem
      - !Ref EFSFileSystem
      - !Ref EFSFileSystemId