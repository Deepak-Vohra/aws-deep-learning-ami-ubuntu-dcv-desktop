AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS Deep Learning Ubuntu Desktop with DCV Server. 
  Connect using a DCV Client.
Parameters:
  AWSUbuntuAMIType:
    Description: AWS Deep Learning AMI (Ubuntu 18.04), or  Ubuntu Pro 20.04 LTS
    Type: String
    Default: "DeepLearningAMIUbuntu1804"
    AllowedValues:
      - "DeepLearningAMIUbuntu1804"
      - "UbuntuPro2004LTS"
  S3Bucket:
    Description: S3 bucket name for read write access from desktop
    Type: String
  S3Import:
    Description: >-
      (Optional) Advanced option to specify S3 import prefix for FSx file-system.
       See FSxForLustre parameter to enable FSx for Lustre file-system. 
    Type: String
    Default: ""
  UbuntuAMIOverride:
    Description: >-
      (Optional) Advanced option to override the Ubuntu 18.04, or 20.04 AMI.  
      Leave blank, if unsure.
    Type: String
    AllowedPattern: '(ami-[0-9a-z]{17})?'
  DesktopVpcId:
    Description: Desktop VPC ID
    Type: 'AWS::EC2::VPC::Id'
  DesktopVpcSubnetId:
    Description: Desktop VPC Subnet ID. Subnet must be public for access over Internet.
    Type: 'AWS::EC2::Subnet::Id'
  DesktopHasPublicIpAddress:
    Description: Should a Public Ip Address be associated with the Desktop?
    Type: String
    Default: "true"
    AllowedValues:
     - "true"
     - "false"
  EbsVolumeSize:
    Default: 200
    Description: Ebs volume size (GB)
    Type: Number
    MinValue: 200
  EbsVolumeType:
    Default: 'gp3'
    Description: Ebs volume type
    Type: String
    AllowedValues:
      - 'gp2'
      - 'gp3'
  
  EFSFileSystemId:
    Description: >-
      (Optional) Advanced option to specify an
      existing EFS File System Id with an existing mount target in your subnet.
      Leave blank to create a new EFS file system.
    Type: String
    AllowedPattern: '(^fs-[0-9a-f]+)$|()$'
    Default: ''
    ConstraintDescription: Should be a Valid EFS File System Id, or blank
  
  EFSMountPath:
    Description: EFS file-system mount directory path.
    Type: String
    Default: '/home/ubuntu/efs'
    ConstraintDescription: Should be a valid file-system directory path
  
  DesktopSecurityGroupId:
    Description: >-
     (Optional) Advanced option to specify existing Desktop Security Group Id. 
      Leave blank to create new Security Group.
    Type: String
    AllowedPattern: '(^sg-[0-9a-z]+)$|()$'
    Default: ''
    ConstraintDescription: Should be a Valid SecurityGroup Id in selected VPC, or blank

  FSxCapacity:
    Description: Must be a multiple of 1200 GBs
    Type: Number
    Default: 1200
    MinValue: 1200
  
  FSxForLustre:
    Description: >-
      Advanced option to enable, disable FSx for Lustre file-system. If enabled, a FSx for Lustre 
      file-system is created and mounted on the desktop. The FSx for Lustre file-system 
      automatically imports data from s3://S3bucket/S3Import. 
      See S3Bucket and S3Import parameters.
    Type: String
    Default: 'disabled'
    AllowedValues:
      - 'enabled'
      - 'disabled'

  FSxMountPath:
    Description: FSx file-system mount directory path.
    Type: String
    Default: '/home/ubuntu/fsx'
    ConstraintDescription: Should be a valid file-system directory path

  KeyName:
    Description: >-
      Name of an existing Amazon EC2 KeyPair to enable SSH and DCV access to the
      desktop
    Type: 'AWS::EC2::KeyPair::KeyName'
  DesktopInstanceType:
    Description: EC2 instance type for desktop
    Type: String
    Default: g4dn.xlarge
    AllowedValues:
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.12xlarge
      - c5d.18xlarge
      - c5d.24xlarge
      - g3s.xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g4dn.8xlarge
      - g4dn.12xlarge
      - g4dn.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - p3dn.24xlarge
      - p4d.24xlarge
      - inf1.xlarge
      - inf1.2xlarge
      - inf1.6xlarge
      - inf1.24xlarge
    ConstraintDescription: Must be a valid CPU, or GPU instance type.
  DesktopAccessCIDR:
    Description: >-
      Restrict desktop access for SSH and DCV client from a valid CIDR range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
  EBSOptimized:
    Description: >-
      Is the instance EBS optimized?
    Type: String
    Default: 'true'
    AllowedValues:
      - 'false'
      - 'true'

Mappings:
  DeepLearningAMIUbuntu1804:
    us-east-1:
      AMI: ami-0e3c68b57d50caf64
    us-east-2:
      AMI: ami-0ae79682024fe31cd 
    us-west-2:
      AMI: ami-0050625d58fa27b6d 
    eu-west-1:
      AMI: ami-050232e50c0e4c717 
    eu-central-1:
      AMI: ami-030544fb939a57d47 
    ap-southeast-1:
      AMI: ami-03cd4f13212437f05 
    ap-southeast-2:
      AMI: ami-0187cfc974691fa71 
    ap-south-1:
      AMI: ami-010f0b376694126ea 
    ap-northeast-1:
      AMI: ami-038b35bb6d9b45de3 
    ap-northeast-2:
      AMI: ami-0b740f27ce3f0e5c7
  UbuntuPro2004LTS:
    us-east-1:
      AMI: ami-0b41210ffa03995a4
    us-east-2:
      AMI: ami-0f6e5975629b255d6
    us-west-2:
      AMI: ami-0343a89ef4c59b9db
    eu-west-1:
      AMI: ami-0e55001f5bba4ebe1
    eu-central-1:
      AMI: ami-04b56bcab7b5da0d4
    ap-southeast-1:
      AMI: ami-0eb71d980428176ac
    ap-southeast-2:
      AMI: ami-09d40e88c515dca0e
    ap-south-1:
      AMI: ami-0be503045f1b31adb
    ap-northeast-1:
      AMI: ami-0ab86080c3fe4ed0c
    ap-northeast-2:
      AMI: ami-04d7345e605f9be3f

Conditions:
  OverrideAMI: !Not 
    - !Equals 
      - !Ref UbuntuAMIOverride
      - ''
  CreateNewEFSFileSystem: !Equals 
    - !Ref EFSFileSystemId
    - ''
  FSxForLustreEnabled: !Equals 
    - !Ref FSxForLustre
    - 'enabled'
  CreateNewSecurityGroup: !Equals 
    - !Ref DesktopSecurityGroupId
    - ''

Resources:
  
  DesktopSecurityGroup:
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Desktop security group
      VpcId: !Ref DesktopVpcId
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  DesktopSecurityGroupCIDRIngressSSH: 
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from CIDR for NICE-DCV access to graphics desktop
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      CidrIp: !Ref DesktopAccessCIDR
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443

  DesktopSecurityGroupCIDRIngressDCV: 
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from CIDR for SSH access to graphics desktop
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      CidrIp: !Ref DesktopAccessCIDR
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  
  DesktopSecurityGroupCIDRIngressSelf: 
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from self security group
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt DesktopSecurityGroup.GroupId
  
  DesktopSecurityGroupCIDREgress: 
    Condition: CreateNewSecurityGroup
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Egress rule for out bound traffic
      GroupId: !GetAtt DesktopSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '0.0.0.0/0'

  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Condition: CreateNewEFSFileSystem
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Encrypted : true
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  
  EFSMountTarget:
    Condition: CreateNewEFSFileSystem
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref DesktopVpcSubnetId
      SecurityGroups: 
        - !GetAtt EFSSecurityGroup.GroupId
        
  EFSSecurityGroup:
    Condition: CreateNewEFSFileSystem
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for EFS mount target
      VpcId: !Ref DesktopVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !If
            - CreateNewSecurityGroup
            - !GetAtt DesktopSecurityGroup.GroupId
            - !Ref DesktopSecurityGroupId
          Description: Ingress from desktop
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          DestinationSecurityGroupId: !If
            - CreateNewSecurityGroup
            - !GetAtt DesktopSecurityGroup.GroupId
            - !Ref DesktopSecurityGroupId
          Description: Egress to desktop
 
  EFSSecurityGroupIngress:
    Condition: CreateNewEFSFileSystem
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the EFSSecurityGroup
      GroupId: !GetAtt EFSSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt EFSSecurityGroup.GroupId

  EFSSecurityGroupEgress:
    Condition: CreateNewEFSFileSystem
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Ingress from within the EFSSecurityGroup
      GroupId: !GetAtt EFSSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      DestinationSecurityGroupId: !GetAtt EFSSecurityGroup.GroupId

  FSxSecurityGroup:
    Condition: FSxForLustreEnabled
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for FSx mount target
      VpcId: !Ref DesktopVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 988
          ToPort: 988
          SourceSecurityGroupId: !If
            - CreateNewSecurityGroup
            - !GetAtt DesktopSecurityGroup.GroupId
            - !Ref DesktopSecurityGroupId
          Description: Ingress from desktop
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 988
          ToPort: 988
          DestinationSecurityGroupId: !If
            - CreateNewSecurityGroup
            - !GetAtt DesktopSecurityGroup.GroupId
            - !Ref DesktopSecurityGroupId
          Description: Egress to desktop
 
  FSxSecurityGroupIngress:
    Condition: FSxForLustreEnabled
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from within the FSxSecurityGroup
      GroupId: !GetAtt FSxSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: !GetAtt FSxSecurityGroup.GroupId

  FSxSecurityGroupEgress:
    Condition: FSxForLustreEnabled
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: Ingress from within the FSxSecurityGroup
      GroupId: !GetAtt FSxSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      DestinationSecurityGroupId: !GetAtt FSxSecurityGroup.GroupId

  FSxFileSystem:
    Condition: FSxForLustreEnabled
    Type: AWS::FSx::FileSystem
    Properties:
      FileSystemType: 'LUSTRE'
      LustreConfiguration:
        DeploymentType: SCRATCH_2
        AutoImportPolicy: NEW_CHANGED
        ImportPath: !Sub s3://${S3Bucket}/${S3Import}
      SecurityGroupIds:
        - !GetAtt FSxSecurityGroup.GroupId
      StorageCapacity: !Ref FSxCapacity
      StorageType: 'SSD'
      SubnetIds: 
        - !Ref DesktopVpcSubnetId
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerFullAccess'
      Policies:
        - PolicyName: s3-read-write
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject*"
                  - "s3:DeleteObject*"
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
        - PolicyName: dcv-license-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::dcv-license.${AWS::Region}/*'
        
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  
  DesktopInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !If 
        - OverrideAMI
        - !Ref UbuntuAMIOverride
        - !FindInMap 
          - !Ref 'AWSUbuntuAMIType'
          - !Ref 'AWS::Region'
          - AMI
      InstanceType: !Ref DesktopInstanceType
      EbsOptimized: !Ref EBSOptimized
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref EbsVolumeSize
            VolumeType: !Ref EbsVolumeType
            Encrypted: true
            DeleteOnTermination: true
      NetworkInterfaces: 
      - AssociatePublicIpAddress: !Ref DesktopHasPublicIpAddress
        DeviceIndex: "0"
        GroupSet: 
          - !If
            - CreateNewSecurityGroup
            - !GetAtt DesktopSecurityGroup.GroupId
            - !Ref DesktopSecurityGroupId

        SubnetId: !Ref DesktopVpcSubnetId

      KeyName: !Ref KeyName
      Tags: 
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-deep-learning-ubuntu-desktop'

      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              Content-Type: multipart/mixed; boundary="//"
              MIME-Version: 1.0

              --//
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"

              #cloud-config
              cloud_final_modules:
              - [scripts-user, always]

              --//
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="userdata.txt"

              #!/bin/bash -xe

              if [[ -f "/etc/systemd/system/dcvsession.service" ]]
              then
                apt-get -y install lustre-client-modules-$(uname -r)
                /usr/local/bin/mount-efs.sh
                /usr/local/bin/mount-fsx.sh
                exit 0
              fi

              echo "Cloud init in progress. Machine will REBOOT after cloud init is complete!!" > /etc/motd
              
              # Find Ubuntu Version 
              VERSION=$(lsb_release -a | grep Release | awk -F ":" '{print $2}' | sed -E -e 's/[[:blank:]]+//g')
              echo "Detected Ubuntu $VERSION"
              
              # setup graphics desktop
              export DEBIAN_FRONTEND=noninteractive
              export DEBCONF_NONINTERACTIVE_SEEN=true

              # check if we have a GPU and if Nvidia drivers and CUDA need to be installed
              [[ ! -x "$(command -v nvidia-smi)" ]] && \
                apt-get update && apt-get -y upgrade && \
                apt-get -y install ubuntu-drivers-common && \
                [[ ! -z "$(ubuntu-drivers devices | grep nvidia-driver | grep recommended | awk -F " " '{print $3}')" ]] && \
                apt-get -y install linux-headers-$(uname -r) && \
                ( ( [[ $VERSION == "18.04" ]] &&
                    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin && \
                    mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
                    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub && \
                    add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /" ) || \
                  ( [[ $VERSION == "20.04" ]] && \
                    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin && \
                    mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
                    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub && \
                    add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /" ) ) && \
                apt-get update && apt-get -y purge cuda && apt-get -y purge nvidia-* && apt-get -y autoremove && \
                apt-get -y install cuda && \
                apt-get -y install nvidia-cuda-toolkit && \
                apt-get -y install libcudnn8 && \
                apt-get -y install libcudnn8-dev && \
                reboot

              # setup software repo for docker
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              apt-key fingerprint 0EBFCD88
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
   
              # setup software repo for fsx-lustre client
              wget -O - https://fsx-lustre-client-repo-public-keys.s3.amazonaws.com/fsx-ubuntu-public-key.asc | apt-key add -
              
              # add key for NICE-DCV
              wget https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
              gpg --import NICE-GPG-KEY

              # add  visual code repository
              wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add -
              add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"

              # update and install required packages
              apt-get update

              apt-get -y install git tar
              apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
              
              # install docker if it is not installed
              if [ ! -x "$(command -v docker)" ]; then
                apt-get -y install docker-ce docker-ce-cli containerd.io      
                usermod -aG docker ubuntu

                # install nvidia container toolkit if we have a nvidia GPU
                if [[ -x "$(command -v nvidia-smi)" ]]
                then
                  curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey |  apt-key add -
                  distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
                  curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | \
                    tee /etc/apt/sources.list.d/nvidia-container-runtime.list
                  apt-get update
                  apt-get -y install nvidia-container-toolkit
                fi
              fi

              apt-get -y install tzdata
              apt-get -y install keyboard-configuration
              apt-get -y install gnupg2
              apt-get -y install lsb-core 
              apt-get -y install libopenmpi-dev 
              apt-get -y install protobuf-compiler

              # install DCV server
              echo "install DCV server..."
              apt-get -y install ubuntu-desktop

              if [[ $VERSION == "18.04" ]]
              then
                bash -c 'echo "deb https://fsx-lustre-client-repo.s3.amazonaws.com/ubuntu bionic main" > /etc/apt/sources.list.d/fsxlustreclientrepo.list && apt-get update'

                apt-get -y install lightdm
                apt-get -y upgrade
                echo "/usr/sbin/lightdm" > /etc/X11/default-display-manager
                dpkg-reconfigure lightdm

                apt-get -y install mesa-utils
                if [ -x "$(command -v nvidia-xconfig)" ]; then
                  nvidia-xconfig --preserve-busid --enable-all-gpus
                fi

                #restart X server
                echo "restart X-server"
                systemctl set-default graphical.target
                systemctl isolate graphical.target

                wget https://d1uj6qtbmh3dt5.cloudfront.net/2020.2/Servers/nice-dcv-2020.2-9662-ubuntu1804-x86_64.tgz
                tar -xvzf nice-dcv-2020.2-9662-ubuntu1804-x86_64.tgz 
                cd nice-dcv-2020.2-9662-ubuntu1804-x86_64
                apt-get -y install  ./nice-dcv-server_2020.2.9662-1_amd64.ubuntu1804.deb
              elif [[ $VERSION == "20.04" ]]
              then
                bash -c 'echo "deb https://fsx-lustre-client-repo.s3.amazonaws.com/ubuntu focal main" > /etc/apt/sources.list.d/fsxlustreclientrepo.list && apt-get update'
               
                apt-get -y install gdm3
                apt-get -y upgrade
                echo "/usr/sbin/gdm3" > /etc/X11/default-display-manager
                dpkg-reconfigure gdm3
                sed -i -e "s/#WaylandEnable=false/WaylandEnable=false/g" /etc/gdm3/custom.conf
                systemctl restart gdm3

                apt-get -y install mesa-utils
                if [ -x "$(command -v nvidia-xconfig)" ]; then
                  nvidia-xconfig --preserve-busid --enable-all-gpus
                fi

                #restart X server
                echo "restart X-server"
                systemctl set-default graphical.target
                systemctl isolate graphical.target

                wget https://d1uj6qtbmh3dt5.cloudfront.net/2020.2/Servers/nice-dcv-2020.2-9662-ubuntu2004-x86_64.tgz
                tar -xvzf nice-dcv-2020.2-9662-ubuntu2004-x86_64.tgz
                cd nice-dcv-2020.2-9662-ubuntu2004-x86_64
                apt-get -y install ./nice-dcv-server_2020.2.9662-1_amd64.ubuntu2004.deb/
              else
                echo "Ubuntu $VERSION is not supported; must be one of 18.04, or 20.04"
                exit 1
              fi

              #restart X server
              systemctl set-default graphical.target
              systemctl isolate graphical.target

              # Create DCV server configuration file
              mkdir  /opt/dcv-session-store
              echo "[license]" >> dcv.conf
              echo "[log]" >> dcv.conf
              echo "[session-management]" >> dcv.conf
              echo "[session-management/defaults]" >> dcv.conf
              echo "[session-management/automatic-console-session]" >> dcv.conf
              echo "storage-root=\"/opt/dcv-session-store/\"" >> dcv.conf
              echo "[display]" >> dcv.conf
              echo "[connectivity]" >> dcv.conf
              echo "[security]" >> dcv.conf
              echo "authentication=\"system\"" >> dcv.conf
              echo "[clipboard]" >> dcv.conf
              echo "primary-selection-copy=true" >> dcv.conf
              echo "primary-selection-paste=true" >> dcv.conf
              mv dcv.conf /etc/dcv/dcv.conf

              # Enable DCV server
              systemctl enable dcvserver

              # Create DCV session permissions files
              rm -f /home/ubuntu/dcv.perms
              echo "[permissions]" >> /home/ubuntu/dcv.perms
              echo "%owner% allow builtin" >> /home/ubuntu/dcv.perms

              # Create startup session script
              echo "#!/bin/bash" >> /usr/local/bin/start-dcvsession.sh
              echo "dcv create-session --type=console --owner ubuntu --storage-root /opt/dcv-session-store/ --permissions-file /home/ubuntu/dcv.perms dcvsession" >> /usr/local/bin/start-dcvsession.sh
              chmod a+x /usr/local/bin/start-dcvsession.sh

              echo "[Unit]" >> /etc/systemd/system/dcvsession.service
              echo "Description=DCV session service" >> /etc/systemd/system/dcvsession.service
              echo "After=dcvserver.service" >> /etc/systemd/system/dcvsession.service
              echo "" >> /etc/systemd/system/dcvsession.service
              echo "[Service]" >> /etc/systemd/system/dcvsession.service
              echo "User=root" >> /etc/systemd/system/dcvsession.service
              echo "ExecStart=/usr/local/bin/start-dcvsession.sh" >> /etc/systemd/system/dcvsession.service
              echo "Restart= on-abort" >> /etc/systemd/system/dcvsession.service
              echo "" >> /etc/systemd/system/dcvsession.service
              echo "[Install]" >> /etc/systemd/system/dcvsession.service
              echo "WantedBy=graphical.target" >> /etc/systemd/system/dcvsession.service

              systemctl enable dcvsession
              echo "install DCV server complete"

              # install nfs-common
              apt-get -y install nfs-common
            
            - AWS_REGION=
            - !Ref AWS::Region
            - |+

            - EFS_FS_ID=
            - !If 
              - CreateNewEFSFileSystem
              - !Ref EFSFileSystem
              - !Ref EFSFileSystemId
            - |+

            - EFS_MOUNT_PATH=
            - !Ref EFSMountPath
            - |+

            - FSX_MOUNT_PATH=
            - !Ref FSxMountPath
            - |+

            - DESKTOP_ROLE_ARN=
            - !GetAtt InstanceRole.Arn
            - |+

            - DESKTOP_SUBNET_ID=
            - !Ref DesktopVpcSubnetId
            - |+

            - DESKTOP_SG_ID=
            - !If
              - CreateNewSecurityGroup
              - !GetAtt DesktopSecurityGroup.GroupId
              - !Ref DesktopSecurityGroupId
            - |+

            - FSX_ENABLED=
            - !If
              - FSxForLustreEnabled
              - "true"
              - "false"
            - |+

            - FSX_FS_ID=
            - !If 
              - FSxForLustreEnabled 
              - !Ref FSxFileSystem
              - ''
            - |+

            - FSX_MOUNT_NAME=
            - !If 
              - FSxForLustreEnabled 
              - !GetAtt FSxFileSystem.LustreMountName
              - ''
            - |+

            - |
              # Create EFS  mount script
              cat >/usr/local/bin/mount-efs.sh <<EOL
              #!/bin/bash

              if [[ ! -d $EFS_MOUNT_PATH ]]
              then
                mkdir $EFS_MOUNT_PATH
              fi
              
              # Mount EFS
              mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport $EFS_FS_ID.efs.$AWS_REGION.amazonaws.com:/ $EFS_MOUNT_PATH

              EOL
              chmod u+x /usr/local/bin/mount-efs.sh

              # Create FSx  mount script
              cat >/usr/local/bin/mount-fsx.sh <<EOL
              #!/bin/bash

              echo "FSx for Lustre is enabled: $FSX_ENABLED"
              # Mount FSX
              if [[ "$FSX_ENABLED"  == "true" ]]
              then

                if [[ ! -d $FSX_MOUNT_PATH ]]
                then
                  mkdir $FSX_MOUNT_PATH
                fi
              
                mount -t lustre -o noatime,flock $FSX_FS_ID.fsx.$AWS_REGION.amazonaws.com@tcp:/$FSX_MOUNT_NAME $FSX_MOUNT_PATH
              fi

              EOL
              chmod u+x /usr/local/bin/mount-fsx.sh

              # Create config file
              mkdir /home/ubuntu/.aws
              cat >/home/ubuntu/.aws/config <<EOL
              [default]
              region = ${AWS_REGION}

              EOL
              chown -R ubuntu:ubuntu /home/ubuntu/.aws

              # update .bashrc
              echo "export desktop_role_arn=${DESKTOP_ROLE_ARN}" >> /home/ubuntu/.bashrc
              echo "export desktop_sg_id=${DESKTOP_SG_ID}" >> /home/ubuntu/.bashrc
              echo "export desktop_subnet_id=${DESKTOP_SUBNET_ID}" >> /home/ubuntu/.bashrc
              echo "export efs_fs_id=${EFS_FS_ID}" >> /home/ubuntu/.bashrc

              if [[ "$FSX_ENABLED"  == "true" ]]
              then
                echo "export fsx_fs_id=${FSX_FS_ID}" >> /home/ubuntu/.bashrc
                echo "export fsx_mount_name=${FSX_MOUNT_NAME}" >> /home/ubuntu/.bashrc
              fi

              # install miniconda3 if anaconda3, or miniconda3 are not installed
              if [[ ! -d "/home/ubuntu/anaconda3" ]] && [[ ! -d "/home/ubuntu/miniconda3" ]]
              then
                wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /home/ubuntu/miniconda3.sh
                bash /home/ubuntu/miniconda3.sh -b -p /home/ubuntu/miniconda3
                echo "source /home/ubuntu/miniconda3/etc/profile.d/conda.sh" >> /home/ubuntu/.bashrc
                rm /home/ubuntu/miniconda3.sh

                source /home/ubuntu/miniconda3/etc/profile.d/conda.sh
                conda update -y --name base -c defaults conda

                # install jupyterlab and boto3 in base env
                conda activate && \
                conda install -y -c conda-forge jupyterlab && \
                conda install -y ipykernel && \
                conda install -y boto3 && \
                conda install -y nb_conda_kernels && \
                conda deactivate

                # create conda environments
                conda create -y --prefix /home/ubuntu/miniconda3/envs/tensorflow python=3.8 && \
                conda activate tensorflow && \
                pip3 install --upgrade pip && \
                pip3 install tensorflow && \
                pip3 install s3fs  && \
                conda install -y ipykernel && \
                conda install -y boto3 && \
                conda deactivate

                conda create -y --prefix /home/ubuntu/miniconda3/envs/pytorch python=3.8 && \
                conda activate pytorch && \
                pip3 install --upgrade pip && \
                pip3 install torch torchvision && \
                pip3 install s3fs && \
                conda install -y ipykernel && \
                conda install -y boto3 && \
                conda deactivate

                conda create -y --prefix /home/ubuntu/miniconda3/envs/mxnet python=3.8 && \
                conda activate mxnet && \
                pip3 install --upgrade pip && \
                pip3 install mxnet && \
                pip3 install s3fs  && \
                conda install -y ipykernel && \
                conda install -y boto3 && \
                conda deactivate
            
                chown -R ubuntu:ubuntu /home/ubuntu/miniconda3
              fi
              
              echo "conda activate" >> /home/ubuntu/.bashrc
              
              # install aws cli
              apt-get -y install awscli

              # install visual code 
              apt-get -y install code
              
              echo "NICE DCV server is enabled!" > /etc/motd
              reboot
Outputs:
  DesktopInstanceId:
    Description: Desktop instance Id
    Value: !Ref DesktopInstance
  DesktopRole:
    Description: IAM role attached to desktop instance profile
    Value: !GetAtt InstanceRole.Arn
  DesktopSecurityGroup:
    Description: Desktop security group
    Value: !If
      - CreateNewSecurityGroup
      - !GetAtt DesktopSecurityGroup.GroupId
      - !Ref DesktopSecurityGroupId
  EFSFileSystemId:
    Description: EFS file system attached to the desktop
    Value: !If
      - CreateNewEFSFileSystem
      - !Ref EFSFileSystem
      - !Ref EFSFileSystemId
